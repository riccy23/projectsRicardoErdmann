Index: src/main/java/de/thm/mni/informatikProjekt/snapstash/handler/AlbumHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.thm.mni.informatikProjekt.snapstash.handler;\r\n\r\nimport io.vertx.core.Future;\r\nimport io.vertx.core.json.Json;\r\nimport io.vertx.core.json.JsonArray;\r\nimport io.vertx.core.json.JsonObject;\r\nimport io.vertx.ext.web.RoutingContext;\r\nimport io.vertx.jdbcclient.JDBCPool;\r\nimport io.vertx.sqlclient.Row;\r\nimport io.vertx.sqlclient.RowSet;\r\nimport io.vertx.sqlclient.Tuple;\r\n\r\npublic class AlbumHandler {\r\n  JDBCPool sqlClient;\r\n\r\n  public AlbumHandler(JDBCPool sqlClient) {\r\n    this.sqlClient = sqlClient;\r\n  }\r\n\r\n  public void getAlbumById(RoutingContext routingContext) {\r\n    String userID = routingContext.pathParam(\"user_id\");\r\n    int userIDPath = -1;\r\n\r\n\r\n    int user_id = routingContext.user().get(\"user_id\");\r\n    String album_id = routingContext.pathParam(\"album_id\");\r\n    int albumId = -1;\r\n    try{\r\n      userIDPath = Integer.parseInt(userID);\r\n       albumId = Integer.parseInt(album_id);\r\n    }catch (Exception e){\r\n      e.getMessage();\r\n    }\r\n\r\n    if(userIDPath == user_id){\r\n\r\n      sqlClient.preparedQuery(\"SELECT albums.album_id, users.user_id, albums.title AS albumTitle \" +\r\n        \"FROM albums_users JOIN users ON albums_users.user_id = users.user_id \" +\r\n        \"JOIN albums ON albums_users.album_id = albums.album_id WHERE users.user_id = ? AND albums.album_id = ?;\").execute(Tuple.of(user_id, albumId), ar -> {\r\n        if (ar.succeeded()) {\r\n          RowSet<Row> albumsRes = ar.result();\r\n          if(albumsRes.size() > 0){\r\n            Row row = albumsRes.iterator().next();\r\n            JsonObject albumRow = new JsonObject()\r\n              .put(\"album_id\", row.getInteger(\"album_id\"))\r\n              .put(\"title\", row.getString(\"albumTitle\"));\r\n\r\n            //Correct album has been found succesfully\r\n            routingContext.response()\r\n              .putHeader(\"content-type\", \"application/json\")\r\n              .setStatusCode(200)\r\n              .end(Json.encodePrettily(albumRow));\r\n          }else{\r\n            routingContext.response()\r\n              .putHeader(\"content-type\", \"application/json\")\r\n              .setStatusCode(404)\r\n              .end(new JsonObject().put(\"error\", \"No album with such id found ! \").encodePrettily());\r\n          }\r\n\r\n\r\n        } else {\r\n          routingContext.response()\r\n            .putHeader(\"content-type\", \"application/json\")\r\n            .setStatusCode(500)\r\n            .end(new JsonObject().put(\"error\", \"Database query failed\").encodePrettily());\r\n        }\r\n      });\r\n\r\n    }else{\r\n      //case if user trys to use forceful browsing\r\n      routingContext.response()\r\n        .putHeader(\"content-type\", \"application/json\")\r\n        .setStatusCode(401)\r\n        .end(new JsonObject().put(\"error\", \"Unauthorized!\").encodePrettily());\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * List all Albums for current User\r\n   * @param routingContext\r\n   */\r\n  public void getAllAlbums(RoutingContext routingContext) {\r\n    int user_id = routingContext.user().get(\"user_id\");\r\n    //Get all Albums for user\r\n    sqlClient.preparedQuery(\"SELECT albums.album_id, users.user_id, albums.title AS albumTitle \" +\r\n      \"FROM albums_users JOIN users ON albums_users.user_id = users.user_id \" +\r\n      \"JOIN albums ON albums_users.album_id = albums.album_id WHERE users.user_id = ?;\").execute(Tuple.of(user_id), ar -> {\r\n      if (ar.succeeded()) {\r\n        RowSet<Row> albumsRes = ar.result();\r\n        JsonArray result = new JsonArray();\r\n        for (Row row : albumsRes) {\r\n          JsonObject albumsRow = new JsonObject()\r\n            .put(\"album_id\", row.getInteger(\"album_id\"))\r\n            .put(\"title\", row.getString(\"albumTitle\"));\r\n          result.add(albumsRow);\r\n        }\r\n        if (!result.isEmpty()) {\r\n          //User have Albums return them\r\n          routingContext.response()\r\n            .putHeader(\"content-type\", \"application/json\")\r\n            .setStatusCode(200)\r\n            .end(Json.encodePrettily(result));\r\n        } else {\r\n          //User has no Albums\r\n          routingContext.response()\r\n            .putHeader(\"content-type\", \"application/json\")\r\n            .setStatusCode(404)\r\n            .end();\r\n        }\r\n      } else {\r\n        routingContext.response()\r\n          .putHeader(\"content-type\", \"application/json\")\r\n          .setStatusCode(500)\r\n          .end(new JsonObject().put(\"error\", \"Database query failed\").encodePrettily());\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create an Album for User and connect it\r\n   * @param routingContext\r\n   */\r\n  public void createAlbum(RoutingContext routingContext) {\r\n    int userId = routingContext.user().get(\"user_id\");\r\n\r\n    // Get body\r\n    routingContext.request().bodyHandler(body -> {\r\n      JsonObject jsonObject;\r\n      try {\r\n        jsonObject = body.toJsonObject();\r\n      } catch (Exception e) {\r\n        routingContext.response()\r\n          .setStatusCode(400)\r\n          .putHeader(\"content-type\", \"application/json\")\r\n          .end(new JsonObject().put(\"error\", \"Invalid Input\").encodePrettily());\r\n        return;\r\n      }\r\n      String albumTitle = jsonObject.getString(\"title\", \"\").trim();\r\n\r\n      //Check if input is valid\r\n      if (albumTitle.isEmpty()) {\r\n        routingContext.response()\r\n          .setStatusCode(400)\r\n          .putHeader(\"content-type\", \"application/json\")\r\n          .end(new JsonObject().put(\"error\", \"Please enter an albumTitle\").encodePrettily());\r\n        return;\r\n      }\r\n\r\n      //Create Album with Title\r\n      sqlClient.preparedQuery(\"INSERT INTO albums (title) VALUES (?);\")\r\n        .execute(Tuple.of(albumTitle), ar -> {\r\n          if (ar.succeeded()) {\r\n            // Get Id from new Album\r\n            sqlClient.query(\"SELECT LAST_INSERT_ID();\").execute(ar2 -> {\r\n              if (ar2.succeeded()) {\r\n                RowSet<Row> albumRow = ar2.result();\r\n                if (albumRow.size() > 0) {\r\n                  int albumId = albumRow.iterator().next().getInteger(\"LAST_INSERT_ID()\");\r\n                  // Linking User and Album\r\n                  sqlClient.preparedQuery(\"INSERT INTO albums_users (user_id, album_id) VALUES (?, ?);\")\r\n                    .execute(Tuple.of(userId, albumId), ar3 -> {\r\n                      if (ar3.succeeded()) {\r\n                        //Album connection successful\r\n                        JsonObject result = new JsonObject()\r\n                          .put(\"album_id\", albumId)\r\n                          .put(\"title\", albumTitle);\r\n                        routingContext.response()\r\n                          .putHeader(\"content-type\", \"application/json\")\r\n                          .setStatusCode(201)\r\n                          .end(Json.encodePrettily(result));\r\n                      } else {\r\n                        //DELETE album, when Linking was not successful\r\n                        sqlClient.preparedQuery(\"DELETE FROM albums WHERE album_id = ?;\")\r\n                          .execute(Tuple.of(albumId), ar4 -> {\r\n                            if (ar4.succeeded()) {\r\n                              routingContext.response()\r\n                                .putHeader(\"content-type\", \"application/json\")\r\n                                .setStatusCode(500)\r\n                                .end(new JsonObject().put(\"error\", \"Database query: LINK ALBUM TO USER failed, album deleted\").encodePrettily());\r\n                            } else {\r\n                              routingContext.response()\r\n                                .putHeader(\"content-type\", \"application/json\")\r\n                                .setStatusCode(500)\r\n                                .end(new JsonObject().put(\"error\", \"Database query: LINK ALBUM TO USER failed, album deletion failed\").encodePrettily());\r\n                            }\r\n                          });\r\n                      }\r\n                    });\r\n                } else {\r\n                  routingContext.response()\r\n                    .putHeader(\"content-type\", \"application/json\")\r\n                    .setStatusCode(500)\r\n                    .end(new JsonObject().put(\"error\", \"No album_id returned\").encodePrettily());\r\n                }\r\n              } else {\r\n                routingContext.response()\r\n                  .putHeader(\"content-type\", \"application/json\")\r\n                  .setStatusCode(500)\r\n                  .end(new JsonObject().put(\"error\", \"Database query: SELECT LAST_INSERT_ID failed\").encodePrettily());\r\n              }\r\n            });\r\n          } else {\r\n            routingContext.response()\r\n              .putHeader(\"content-type\", \"application/json\")\r\n              .setStatusCode(500)\r\n              .end(new JsonObject().put(\"error\", \"Database query: INSERT ALBUM failed\").encodePrettily());\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  public void updateAlbumTitle(RoutingContext routingContext) {\r\n    // Get body\r\n    routingContext.request().bodyHandler(body -> {\r\n      JsonObject jsonObject;\r\n      try {\r\n        jsonObject = body.toJsonObject();\r\n      } catch (Exception e) {\r\n        routingContext.response()\r\n          .setStatusCode(400)\r\n          .putHeader(\"content-type\", \"application/json\")\r\n          .end(new JsonObject().put(\"error\", \"Invalid Input\").encodePrettily());\r\n        return;\r\n      }\r\n\r\n      //read from json body\r\n      String newTitle = jsonObject.getString(\"title\",\"\").trim();\r\n\r\n\r\n      int userId = routingContext.user().get(\"user_id\");\r\n      String userIdPath = routingContext.pathParam(\"user_id\");\r\n      String albumIdPath = routingContext.pathParam(\"album_id\");\r\n      int userIdPathInt = -1;\r\n      int albumIdInt = -1;\r\n      try{\r\n        userIdPathInt = Integer.parseInt(userIdPath);\r\n        albumIdInt = Integer.parseInt(albumIdPath);\r\n      }catch (Exception e){\r\n        e.getMessage();\r\n      }\r\n\r\n      if (userId == userIdPathInt){\r\n\r\n        sqlClient.preparedQuery(\"UPDATE albums SET title = ? WHERE album_id = ? AND album_id IN (SELECT album_id FROM albums_users WHERE user_id = ?);\").execute(Tuple.of(newTitle,albumIdInt,userIdPathInt), ar ->{\r\n          if (ar.succeeded()) {\r\n            if (ar.result().rowCount() > 0) {\r\n              routingContext.response()\r\n                .setStatusCode(200)\r\n                .putHeader(\"content-type\", \"application/json\")\r\n                .end(new JsonObject().put(\"message\", \"Title updated succesfully\").encodePrettily());\r\n            } else {\r\n              routingContext.response()\r\n                .setStatusCode(404)\r\n                .putHeader(\"content-type\", \"application/json\")\r\n                .end(new JsonObject().put(\"error\", \"Album not found\").encodePrettily());\r\n            }\r\n\r\n          }else{\r\n            routingContext.response()\r\n              .setStatusCode(500)\r\n              .putHeader(\"content-type\", \"application/json\")\r\n              .end(new JsonObject().put(\"error\", \"Invalid Input\").encodePrettily());\r\n          }\r\n        });\r\n      }else{\r\n        routingContext.response()\r\n          .setStatusCode(401)\r\n          .putHeader(\"content-type\", \"application/json\")\r\n          .end(new JsonObject().put(\"error\", \"Unauthorized!\").encodePrettily());\r\n      }\r\n\r\n\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Delete an Album with userId and albumId from Path\r\n   * @param routingContext\r\n   */\r\n  public void deleteAlbum(RoutingContext routingContext) {\r\n    int user_id = routingContext.user().get(\"user_id\");\r\n    String userIdPath = routingContext.pathParam(\"user_id\");\r\n    String albumId = routingContext.pathParam(\"album_id\");\r\n    int userIdInt = -1;\r\n    try{\r\n      userIdInt = Integer.parseInt(userIdPath);\r\n    }catch (Exception e){\r\n      e.getMessage();\r\n    }\r\n\r\n\r\n    if (user_id == userIdInt) {\r\n      if (!albumId.isEmpty()) {\r\n        int albumIdInt = Integer.parseInt(albumId);\r\n        // Check if user owns album\r\n        sqlClient.preparedQuery(\"SELECT * FROM albums_users WHERE album_id = ? and user_id = ?;\").execute(Tuple.of(albumIdInt, user_id), ar -> {\r\n          if (ar.failed()) {\r\n            routingContext.response()\r\n              .putHeader(\"content-type\", \"application/json\")\r\n              .setStatusCode(500)\r\n              .end(new JsonObject().put(\"error\", \"SELCET Query Failed\").encodePrettily());\r\n          } else {\r\n            RowSet<Row> rows = ar.result();\r\n            if (rows.size() == 0) {\r\n              // No permissions\r\n              routingContext.response()\r\n                .putHeader(\"content-type\", \"application/json\")\r\n                .setStatusCode(403)\r\n                .end(new JsonObject().put(\"error\", \"No permission to delete this album\").encodePrettily());\r\n            } else {\r\n              // Delete Album\r\n              sqlClient.preparedQuery(\"DELETE FROM albums WHERE album_id = ?;\")\r\n                .execute(Tuple.of(albumIdInt), ar2 -> {\r\n                  if (ar2.failed()) {\r\n                    routingContext.response()\r\n                      .putHeader(\"content-type\", \"application/json\")\r\n                      .setStatusCode(500)\r\n                      .end(new JsonObject().put(\"error\", \"DELETE query failed\").encodePrettily());\r\n                  } else {\r\n                    routingContext.response()\r\n                      .putHeader(\"content-type\", \"application/json\")\r\n                      .setStatusCode(204)\r\n                      .end(new JsonObject().put(\"message\", \"Album successfully deleted\").encodePrettily());\r\n                  }\r\n                });\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        routingContext.response()\r\n          .putHeader(\"content-type\", \"application/json\")\r\n          .setStatusCode(400)\r\n          .end(new JsonObject().put(\"error\", \"Invalid Input\").encodePrettily());\r\n      }\r\n    } else {\r\n      routingContext.response()\r\n        .putHeader(\"content-type\", \"application/json\")\r\n        .setStatusCode(403)\r\n        .end(new JsonObject().put(\"error\", \"No permission to delete this album\").encodePrettily());\r\n    }\r\n\r\n  }\r\n\r\n  //TODO: Create Routes, Bind when KeywordHandler is ready\r\n  public void assignKeyword(RoutingContext routingContext) {\r\n\r\n\r\n      String albumId = routingContext.pathParam(\"album_id\");\r\n      String keywordId = routingContext.pathParam(\"keyword_id\");\r\n      int userIdSess = routingContext.user().get(\"user_id\");\r\n      String userIdPath = routingContext.pathParam(\"user_id\");\r\n      int userIdInt = -1;\r\n      int albumIdInt = -1;\r\n      int keywordIdInt = -1;\r\n\r\n      try {\r\n        albumIdInt = Integer.parseInt(albumId);\r\n        keywordIdInt = Integer.parseInt(keywordId);\r\n        userIdInt = Integer.parseInt(userIdPath);\r\n      }catch (Exception e){\r\n        e.getMessage();\r\n      }\r\n\r\n      if(userIdSess == userIdInt){\r\n\r\n\r\n        sqlClient.preparedQuery(\"SELECT * FROM albums WHERE album_id = ?\")\r\n          .execute(Tuple.of(albumIdInt), albumAr ->{\r\n            RowSet<Row> rows = albumAr.result();\r\n            if (rows.size() == 0){\r\n              routingContext.response()\r\n                .setStatusCode(404)\r\n                .putHeader(\"content-type\", \"application/json\")\r\n                .end(new JsonObject().put(\"error\", \"Album not found\").encodePrettily());\r\n            }\r\n          });\r\n\r\n\r\n        sqlClient.preparedQuery(\"SELECT * FROM keywords WHERE keyword_id = ?\")\r\n          .execute(Tuple.of(keywordIdInt), keywordAr ->{\r\n            RowSet<Row> rows = keywordAr.result();\r\n            if (rows.size() == 0){\r\n              routingContext.response()\r\n                .setStatusCode(404)\r\n                .putHeader(\"content-type\", \"application/json\")\r\n                .end(new JsonObject().put(\"error\", \"keyword not found\").encodePrettily());\r\n            }\r\n          });\r\n\r\n\r\n        sqlClient.preparedQuery(\"INSERT INTO albums_keywords (album_id, keyword_id) VALUES (?,?);\")\r\n          .execute(Tuple.of(albumIdInt,keywordIdInt ), ar -> {\r\n\r\n            if (ar.failed()){\r\n              routingContext.response()\r\n                .putHeader(\"content-type\", \"application/json\")\r\n                .setStatusCode(500)\r\n                .end(new JsonObject().put(\"error\", \"Database error\").encodePrettily());\r\n            }\r\n\r\n            if (ar.succeeded()) {\r\n              routingContext.response()\r\n                .putHeader(\"content-type\", \"application/json\")\r\n                .setStatusCode(201)\r\n                .end(new JsonObject().put(\"message\", \"Keyword successfully assigned\").encodePrettily());\r\n            } else {\r\n              routingContext.response()\r\n                .putHeader(\"content-type\", \"application/json\")\r\n                .setStatusCode(400)\r\n                .end(new JsonObject().put(\"error\", \"invalid Input\").encodePrettily());\r\n            }\r\n\r\n\r\n          });\r\n      }else{\r\n        routingContext.response()\r\n          .setStatusCode(401)\r\n          .putHeader(\"content-type\", \"application/json\")\r\n          .end(new JsonObject().put(\"error\", \"Unauthorized!\").encodePrettily());\r\n      }\r\n\r\n  }\r\n\r\n  // löse Verknüpfung zwischen Albums und keyword auf\r\n  public void deleteKeyword(RoutingContext routingContext) {\r\n\r\n  }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/de/thm/mni/informatikProjekt/snapstash/handler/AlbumHandler.java b/src/main/java/de/thm/mni/informatikProjekt/snapstash/handler/AlbumHandler.java
--- a/src/main/java/de/thm/mni/informatikProjekt/snapstash/handler/AlbumHandler.java	(revision 6632b784a47d111052d9252d43c19c66eef27061)
+++ b/src/main/java/de/thm/mni/informatikProjekt/snapstash/handler/AlbumHandler.java	(date 1722519714271)
@@ -126,6 +126,7 @@
   public void createAlbum(RoutingContext routingContext) {
     int userId = routingContext.user().get("user_id");
 
+    //TODO: CHECK INPUT LENGTH
     // Get body
     routingContext.request().bodyHandler(body -> {
       JsonObject jsonObject;
@@ -347,8 +348,6 @@
 
   //TODO: Create Routes, Bind when KeywordHandler is ready
   public void assignKeyword(RoutingContext routingContext) {
-
-
       String albumId = routingContext.pathParam("album_id");
       String keywordId = routingContext.pathParam("keyword_id");
       int userIdSess = routingContext.user().get("user_id");
Index: webroot/scripts/login.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar _this = this;\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    // Handle form submission\r\n    var loginForm = document.querySelector('form');\r\n    loginForm === null || loginForm === void 0 ? void 0 : loginForm.addEventListener('submit', function (event) { return __awaiter(_this, void 0, void 0, function () {\r\n        var userName, password, res, data, userId;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    event.preventDefault();\r\n                    userName = document.getElementById('floatingInput').value;\r\n                    password = document.getElementById('floatingPassword').value;\r\n                    console.log(\"Username: \".concat(userName, \", Password: \").concat(password));\r\n                    return [4 /*yield*/, fetch('http://localhost:8888/login', {\r\n                            method: 'POST',\r\n                            mode: 'cors',\r\n                            credentials: 'include',\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            },\r\n                            body: JSON.stringify({ username: userName, password: password })\r\n                        })];\r\n                case 1:\r\n                    res = _a.sent();\r\n                    if (!res.ok) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, res.json()];\r\n                case 2:\r\n                    data = _a.sent();\r\n                    console.log(data);\r\n                    userId = data.user_id;\r\n                    window.location.href = \"/home/\".concat(userId);\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    console.error('Login failed');\r\n                    _a.label = 4;\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n});\r\n//# sourceMappingURL=login.js.map
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/webroot/scripts/login.js b/webroot/scripts/login.js
--- a/webroot/scripts/login.js	(revision 6632b784a47d111052d9252d43c19c66eef27061)
+++ b/webroot/scripts/login.js	(date 1722519830733)
@@ -13,7 +13,7 @@
     function verb(n) { return function (v) { return step([n, v]); }; }
     function step(op) {
         if (f) throw new TypeError("Generator is already executing.");
-        while (_) try {
+        while (g && (g = 0, op[0] && (_ = 0)), _) try {
             if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
             if (y = 0, t) op = [op[0] & 2, t.value];
             switch (op[0]) {
Index: webroot/.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"921b956f-cc3d-445b-8830-3a1a304cc9a2\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/../../..\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ijT8ICL2WTO1mHH0mQA5wtHD03\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;backend&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;/Users/ricardo/Desktop/gruppe-10/backend/snapstash/webroot&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;settings.typescriptcompiler&quot;,\r\n    &quot;ts.external.directory.path&quot;: &quot;/Applications/WebStorm.app/Contents/plugins/javascript-impl/jsLanguageServicesImpl/external&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"921b956f-cc3d-445b-8830-3a1a304cc9a2\" name=\"Changes\" comment=\"\" />\r\n      <created>1720002825450</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1720002825450</updated>\r\n      <workItem from=\"1720002826452\" duration=\"2082000\" />\r\n      <workItem from=\"1720005016086\" duration=\"150000\" />\r\n      <workItem from=\"1720005378078\" duration=\"16000\" />\r\n      <workItem from=\"1720005413343\" duration=\"5000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/webroot/.idea/workspace.xml b/webroot/.idea/workspace.xml
--- a/webroot/.idea/workspace.xml	(revision 6632b784a47d111052d9252d43c19c66eef27061)
+++ b/webroot/.idea/workspace.xml	(date 1722519762357)
@@ -12,7 +12,19 @@
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="TypeScript File" />
+      </list>
+    </option>
+  </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$/../../.." value="master" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/../../.." />
   </component>
   <component name="ProjectColorInfo">{
@@ -23,23 +35,31 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;backend&quot;,
-    &quot;last_opened_file_path&quot;: &quot;/Users/ricardo/Desktop/gruppe-10/backend/snapstash/webroot&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;settings.typescriptcompiler&quot;,
-    &quot;ts.external.directory.path&quot;: &quot;/Applications/WebStorm.app/Contents/plugins/javascript-impl/jsLanguageServicesImpl/external&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "git-widget-placeholder": "master",
+    "ignore.virus.scanning.warn.message": "true",
+    "last_opened_file_path": "/Users/ricardo/Desktop/gruppe-10/backend/snapstash/webroot",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "settings.editor.selected.configurable": "settings.typescriptcompiler",
+    "ts.external.directory.path": "E:\\Benutzer\\robin\\AppData\\Local\\Programs\\WebStorm\\plugins\\javascript-plugin\\jsLanguageServicesImpl\\external",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
+}]]></component>
+  <component name="SharedIndexes">
+    <attachedChunks>
+      <set>
+        <option value="bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-WS-241.15989.105" />
+      </set>
+    </attachedChunks>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -52,10 +72,19 @@
       <workItem from="1720005016086" duration="150000" />
       <workItem from="1720005378078" duration="16000" />
       <workItem from="1720005413343" duration="5000" />
+      <workItem from="1721473553124" duration="10341000" />
+      <workItem from="1721559423069" duration="7332000" />
+      <workItem from="1722519100492" duration="652000" />
     </task>
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
+    <option name="exactExcludedFiles">
+      <list>
+        <option value="$PROJECT_DIR$/scripts/models/user_state.js.map" />
+        <option value="$PROJECT_DIR$/scripts/models/user_state.js" />
+      </list>
+    </option>
   </component>
 </project>
\ No newline at end of file
